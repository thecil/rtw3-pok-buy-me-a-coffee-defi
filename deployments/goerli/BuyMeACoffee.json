{
  "address": "0xa38D568602b4D32692BdD2Ec9FcA991fFeFe0521",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "NewMemo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "buyCoffee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "buyLargeCoffee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMemos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "internalType": "struct BuyMeACoffee.Memo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "updateWithdrawAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTips",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4799111e8a7ac8ee66d8f4606e12103e91f5bc58bd06309a583226ca440ebf9f",
  "receipt": {
    "to": null,
    "from": "0x32F0a4Db8350a0882241623A50587e048e11a126",
    "contractAddress": "0xa38D568602b4D32692BdD2Ec9FcA991fFeFe0521",
    "transactionIndex": 42,
    "gasUsed": "611557",
    "logsBloom": "0x
    "blockHash": "0x46719bfe41b75c95c5196dff923bd8bc9affe00b1eb3536c907201693852c112",
    "transactionHash": "0x4799111e8a7ac8ee66d8f4606e12103e91f5bc58bd06309a583226ca440ebf9f",
    "logs": [],
    "blockNumber": 7924123,
    "cumulativeGasUsed": "9705537",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "f886829aabb79ed1a683501b71d98a91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"NewMemo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"buyCoffee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"buyLargeCoffee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct BuyMeACoffee.Memo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCoffee(string,string)\":{\"details\":\"buy a coffee for owner (sends an ETH tip and leaves a memo)\",\"params\":{\"_message\":\"a nice message from the purchaser\",\"_name\":\"name of the coffee purchaser\"}},\"buyLargeCoffee(string,string)\":{\"details\":\"Allow your smart contract to buyLargeCoffee for 0.003 ETH,\",\"params\":{\"_message\":\"a nice message from the purchaser\",\"_name\":\"name of the coffee purchaser\"}},\"getMemos()\":{\"details\":\"fetches all stored memos\"},\"updateWithdrawAddress(address)\":{\"details\":\"send the entire balance stored in this contract to the owner\"},\"withdrawTips()\":{\"details\":\"send the entire balance stored in this contract to the owner\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BuyMeACoffee.sol\":\"BuyMeACoffee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/BuyMeACoffee.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\n\\r\\n// contracts/BuyMeACoffee.sol\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Switch this to your own contract address once deployed, for bookkeeping!\\r\\n// Example Contract Address on Goerli: 0xDBa03676a2fBb6711CB652beF5B7416A53c1421D\\r\\n\\r\\ncontract BuyMeACoffee {\\r\\n    // Event to emit when a Memo is created.\\r\\n    event NewMemo(\\r\\n        address indexed from,\\r\\n        uint256 timestamp,\\r\\n        string name,\\r\\n        string message\\r\\n    );\\r\\n\\r\\n    // Event to emit when a owner is changed\\r\\n    event NewOwner(address indexed newOwner);\\r\\n\\r\\n    // Memo struct.\\r\\n    struct Memo {\\r\\n        address from;\\r\\n        uint256 timestamp;\\r\\n        string name;\\r\\n        string message;\\r\\n    }\\r\\n\\r\\n    // Address of contract deployer. Marked payable so that\\r\\n    // we can withdraw to this address later.\\r\\n    address payable public owner;\\r\\n\\r\\n    // List of all memos received from coffee purchases.\\r\\n    Memo[] memos;\\r\\n\\r\\n    constructor() {\\r\\n        // Store the address of the deployer as a payable address.\\r\\n        // When we withdraw funds, we'll withdraw here.\\r\\n        owner = payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev fetches all stored memos\\r\\n     */\\r\\n    function getMemos() public view returns (Memo[] memory) {\\r\\n        return memos;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev buy a coffee for owner (sends an ETH tip and leaves a memo)\\r\\n     * @param _name name of the coffee purchaser\\r\\n     * @param _message a nice message from the purchaser\\r\\n     */\\r\\n    function buyCoffee(string memory _name, string memory _message)\\r\\n        public\\r\\n        payable\\r\\n    {\\r\\n        // Must accept more than 0 ETH for a coffee.\\r\\n        require(msg.value > 0, \\\"can't buy coffee for free!\\\");\\r\\n\\r\\n        // Add the memo to storage!\\r\\n        memos.push(Memo(msg.sender, block.timestamp, _name, _message));\\r\\n\\r\\n        // Emit a NewMemo event with details about the memo.\\r\\n        emit NewMemo(msg.sender, block.timestamp, _name, _message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allow your smart contract to buyLargeCoffee for 0.003 ETH,\\r\\n     * @param _name name of the coffee purchaser\\r\\n     * @param _message a nice message from the purchaser\\r\\n     */\\r\\n    function buyLargeCoffee(string memory _name, string memory _message)\\r\\n        public\\r\\n        payable\\r\\n    {\\r\\n        // Must accept more than 0 ETH for a coffee.\\r\\n        require(msg.value >= 0.003 ether, \\\"can't buy coffee for free!\\\");\\r\\n\\r\\n        // Add the memo to storage!\\r\\n        memos.push(Memo(msg.sender, block.timestamp, _name, _message));\\r\\n\\r\\n        // Emit a NewMemo event with details about the memo.\\r\\n        emit NewMemo(msg.sender, block.timestamp, _name, _message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev send the entire balance stored in this contract to the owner\\r\\n     */\\r\\n    function withdrawTips() public {\\r\\n        require(owner.send(address(this).balance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev send the entire balance stored in this contract to the owner\\r\\n     */\\r\\n    function updateWithdrawAddress(address _newOwner) public {\\r\\n        require(msg.sender == owner, \\\"Only owner allowed\\\");\\r\\n        require(owner != _newOwner, \\\"Address should be different\\\");\\r\\n        owner = payable(_newOwner);\\r\\n        emit NewOwner(_newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x949a9756d140091597c4235e6fb3ffc0f60b2b5ac0ae83cc141af95fcec5b024\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556109b8806100326000396000f3fe6080604052600436106100655760003560e01c8063865c517211610043578063865c5172146100a75780638da5cb5b146100d2578063a3f4b573146100f457610065565b8063204206e11461006a5780633aaa74b21461007f578063417f9ea914610094575b600080fd5b61007d6100783660046106a5565b610114565b005b34801561008b57600080fd5b5061007d610298565b61007d6100a23660046106a5565b6102cc565b3480156100b357600080fd5b506100bc6102f3565b6040516100c99190610765565b60405180910390f35b3480156100de57600080fd5b506100e7610496565b6040516100c99190610751565b34801561010057600080fd5b5061007d61010f366004610677565b6104a5565b6000341161013d5760405162461bcd60e51b81526004016101349061085c565b60405180910390fd5b6040805160808101825233815242602080830191825292820185815260608301859052600180548082018255600091909152835160049091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b03939093167fffffffffffffffffffffffff000000000000000000000000000000000000000090931692909217825592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78401559051805193949193610230937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf80192919091019061055d565b506060820151805161024c91600384019160209091019061055d565b505050336001600160a01b03167fc56140e05f516509ae28110e0f72e17558a7561630dad2647c3ae87d986e365c42848460405161028c939291906108ca565b60405180910390a25050565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050506102ca57600080fd5b565b660aa87bee53800034101561013d5760405162461bcd60e51b81526004016101349061085c565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561048d576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161036a906108ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610396906108ff565b80156103e35780601f106103b8576101008083540402835291602001916103e3565b820191906000526020600020905b8154815290600101906020018083116103c657829003601f168201915b505050505081526020016003820180546103fc906108ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610428906108ff565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b50505050508152505081526020019060010190610317565b50505050905090565b6000546001600160a01b031681565b6000546001600160a01b031633146104cf5760405162461bcd60e51b815260040161013490610825565b6000546001600160a01b03828116911614156104fd5760405162461bcd60e51b815260040161013490610893565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc91a250565b828054610569906108ff565b90600052602060002090601f01602090048101928261058b57600085556105d1565b82601f106105a457805160ff19168380011785556105d1565b828001600101855582156105d1579182015b828111156105d15782518255916020019190600101906105b6565b506105dd9291506105e1565b5090565b5b808211156105dd57600081556001016105e2565b600082601f830112610606578081fd5b813567ffffffffffffffff8082111561062157610621610953565b6040516020601f19601f850116820101818110838211171561064557610645610953565b60405282815284830160200186101561065c578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215610688578081fd5b81356001600160a01b038116811461069e578182fd5b9392505050565b600080604083850312156106b7578081fd5b823567ffffffffffffffff808211156106ce578283fd5b6106da868387016105f6565b935060208501359150808211156106ef578283fd5b506106fc858286016105f6565b9150509250929050565b60008151808452815b8181101561072b5760208185018101518683018201520161070f565b8181111561073c5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015610817577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160806001600160a01b03825116855288820151898601528782015181898701526107e682870182610706565b915050606080830151925085820381870152506108038183610706565b968901969450505090860190600101610789565b509098975050505050505050565b60208082526012908201527f4f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000604082015260600190565b6020808252601a908201527f63616e27742062757920636f6666656520666f72206672656521000000000000604082015260600190565b6020808252601b908201527f416464726573732073686f756c6420626520646966666572656e740000000000604082015260600190565b6000848252606060208301526108e36060830185610706565b82810360408401526108f58185610706565b9695505050505050565b60028104600182168061091357607f821691505b6020821081141561094d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212208f0c6b9f2d0aa742a49c55b46b80ab61f64b070052a25b90d5e830c7c01eaabf64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100655760003560e01c8063865c517211610043578063865c5172146100a75780638da5cb5b146100d2578063a3f4b573146100f457610065565b8063204206e11461006a5780633aaa74b21461007f578063417f9ea914610094575b600080fd5b61007d6100783660046106a5565b610114565b005b34801561008b57600080fd5b5061007d610298565b61007d6100a23660046106a5565b6102cc565b3480156100b357600080fd5b506100bc6102f3565b6040516100c99190610765565b60405180910390f35b3480156100de57600080fd5b506100e7610496565b6040516100c99190610751565b34801561010057600080fd5b5061007d61010f366004610677565b6104a5565b6000341161013d5760405162461bcd60e51b81526004016101349061085c565b60405180910390fd5b6040805160808101825233815242602080830191825292820185815260608301859052600180548082018255600091909152835160049091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b03939093167fffffffffffffffffffffffff000000000000000000000000000000000000000090931692909217825592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78401559051805193949193610230937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf80192919091019061055d565b506060820151805161024c91600384019160209091019061055d565b505050336001600160a01b03167fc56140e05f516509ae28110e0f72e17558a7561630dad2647c3ae87d986e365c42848460405161028c939291906108ca565b60405180910390a25050565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050506102ca57600080fd5b565b660aa87bee53800034101561013d5760405162461bcd60e51b81526004016101349061085c565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561048d576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001810154938301939093526002830180549293929184019161036a906108ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610396906108ff565b80156103e35780601f106103b8576101008083540402835291602001916103e3565b820191906000526020600020905b8154815290600101906020018083116103c657829003601f168201915b505050505081526020016003820180546103fc906108ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610428906108ff565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b50505050508152505081526020019060010190610317565b50505050905090565b6000546001600160a01b031681565b6000546001600160a01b031633146104cf5760405162461bcd60e51b815260040161013490610825565b6000546001600160a01b03828116911614156104fd5760405162461bcd60e51b815260040161013490610893565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc91a250565b828054610569906108ff565b90600052602060002090601f01602090048101928261058b57600085556105d1565b82601f106105a457805160ff19168380011785556105d1565b828001600101855582156105d1579182015b828111156105d15782518255916020019190600101906105b6565b506105dd9291506105e1565b5090565b5b808211156105dd57600081556001016105e2565b600082601f830112610606578081fd5b813567ffffffffffffffff8082111561062157610621610953565b6040516020601f19601f850116820101818110838211171561064557610645610953565b60405282815284830160200186101561065c578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215610688578081fd5b81356001600160a01b038116811461069e578182fd5b9392505050565b600080604083850312156106b7578081fd5b823567ffffffffffffffff808211156106ce578283fd5b6106da868387016105f6565b935060208501359150808211156106ef578283fd5b506106fc858286016105f6565b9150509250929050565b60008151808452815b8181101561072b5760208185018101518683018201520161070f565b8181111561073c5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015610817577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160806001600160a01b03825116855288820151898601528782015181898701526107e682870182610706565b915050606080830151925085820381870152506108038183610706565b968901969450505090860190600101610789565b509098975050505050505050565b60208082526012908201527f4f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000604082015260600190565b6020808252601a908201527f63616e27742062757920636f6666656520666f72206672656521000000000000604082015260600190565b6020808252601b908201527f416464726573732073686f756c6420626520646966666572656e740000000000604082015260600190565b6000848252606060208301526108e36060830185610706565b82810360408401526108f58185610706565b9695505050505050565b60028104600182168061091357607f821691505b6020821081141561094d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212208f0c6b9f2d0aa742a49c55b46b80ab61f64b070052a25b90d5e830c7c01eaabf64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCoffee(string,string)": {
        "details": "buy a coffee for owner (sends an ETH tip and leaves a memo)",
        "params": {
          "_message": "a nice message from the purchaser",
          "_name": "name of the coffee purchaser"
        }
      },
      "buyLargeCoffee(string,string)": {
        "details": "Allow your smart contract to buyLargeCoffee for 0.003 ETH,",
        "params": {
          "_message": "a nice message from the purchaser",
          "_name": "name of the coffee purchaser"
        }
      },
      "getMemos()": {
        "details": "fetches all stored memos"
      },
      "updateWithdrawAddress(address)": {
        "details": "send the entire balance stored in this contract to the owner"
      },
      "withdrawTips()": {
        "details": "send the entire balance stored in this contract to the owner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/BuyMeACoffee.sol:BuyMeACoffee",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 30,
        "contract": "contracts/BuyMeACoffee.sol:BuyMeACoffee",
        "label": "memos",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Memo)24_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Memo)24_storage)dyn_storage": {
        "base": "t_struct(Memo)24_storage",
        "encoding": "dynamic_array",
        "label": "struct BuyMeACoffee.Memo[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Memo)24_storage": {
        "encoding": "inplace",
        "label": "struct BuyMeACoffee.Memo",
        "members": [
          {
            "astId": 17,
            "contract": "contracts/BuyMeACoffee.sol:BuyMeACoffee",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19,
            "contract": "contracts/BuyMeACoffee.sol:BuyMeACoffee",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/BuyMeACoffee.sol:BuyMeACoffee",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 23,
            "contract": "contracts/BuyMeACoffee.sol:BuyMeACoffee",
            "label": "message",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}